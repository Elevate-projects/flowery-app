// Mocks generated by Mockito 5.4.6 from annotations
// in flowery_app/test/presentation/auth/login/views_model/login_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flowery_app/api/client/api_result.dart' as _i5;
import 'package:flowery_app/api/requests/login_request/login_request.dart'
    as _i7;
import 'package:flowery_app/core/cache/shared_preferences_helper.dart' as _i10;
import 'package:flowery_app/core/secure_storage/secure_storage.dart' as _i9;
import 'package:flowery_app/domain/entities/user_data/user_data_entity.dart'
    as _i6;
import 'package:flowery_app/domain/use_cases/login/login_with_email_and_password_use_case.dart'
    as _i3;
import 'package:flutter_secure_storage/flutter_secure_storage.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFlutterSecureStorage_0 extends _i1.SmartFake
    implements _i2.FlutterSecureStorage {
  _FakeFlutterSecureStorage_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [LoginWithEmailAndPasswordUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginWithEmailAndPasswordUseCase extends _i1.Mock
    implements _i3.LoginWithEmailAndPasswordUseCase {
  MockLoginWithEmailAndPasswordUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i5.Result<_i6.UserDataEntity?>> invoke({
    required _i7.LoginRequest? request,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#invoke, [], {#request: request}),
            returnValue: _i4.Future<_i5.Result<_i6.UserDataEntity?>>.value(
              _i8.dummyValue<_i5.Result<_i6.UserDataEntity?>>(
                this,
                Invocation.method(#invoke, [], {#request: request}),
              ),
            ),
          )
          as _i4.Future<_i5.Result<_i6.UserDataEntity?>>);
}

/// A class which mocks [SecureStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockSecureStorage extends _i1.Mock implements _i9.SecureStorage {
  MockSecureStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FlutterSecureStorage get storage =>
      (super.noSuchMethod(
            Invocation.getter(#storage),
            returnValue: _FakeFlutterSecureStorage_0(
              this,
              Invocation.getter(#storage),
            ),
          )
          as _i2.FlutterSecureStorage);

  @override
  _i4.Future<void> saveData({required String? key, required String? value}) =>
      (super.noSuchMethod(
            Invocation.method(#saveData, [], {#key: key, #value: value}),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> saveUserToken({required String? token}) =>
      (super.noSuchMethod(
            Invocation.method(#saveUserToken, [], {#token: token}),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<String?> getData({required String? key}) =>
      (super.noSuchMethod(
            Invocation.method(#getData, [], {#key: key}),
            returnValue: _i4.Future<String?>.value(),
          )
          as _i4.Future<String?>);

  @override
  _i4.Future<void> deleteData({required String? key}) =>
      (super.noSuchMethod(
            Invocation.method(#deleteData, [], {#key: key}),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [SharedPreferencesHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferencesHelper extends _i1.Mock
    implements _i10.SharedPreferencesHelper {
  MockSharedPreferencesHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> removeData({required String? key}) =>
      (super.noSuchMethod(
            Invocation.method(#removeData, [], {#key: key}),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> clearAllData() =>
      (super.noSuchMethod(
            Invocation.method(#clearAllData, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> saveDouble({required String? key, required double? value}) =>
      (super.noSuchMethod(
            Invocation.method(#saveDouble, [], {#key: key, #value: value}),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> saveInt({required String? key, required int? value}) =>
      (super.noSuchMethod(
            Invocation.method(#saveInt, [], {#key: key, #value: value}),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> saveString({required String? key, required String? value}) =>
      (super.noSuchMethod(
            Invocation.method(#saveString, [], {#key: key, #value: value}),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> saveBool({required String? key, required bool? value}) =>
      (super.noSuchMethod(
            Invocation.method(#saveBool, [], {#key: key, #value: value}),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> saveStringList({
    required String? key,
    required List<String>? value,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#saveStringList, [], {#key: key, #value: value}),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  List<String> getStringList({required String? key}) =>
      (super.noSuchMethod(
            Invocation.method(#getStringList, [], {#key: key}),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  bool getBool({required String? key}) =>
      (super.noSuchMethod(
            Invocation.method(#getBool, [], {#key: key}),
            returnValue: false,
          )
          as bool);

  @override
  double getDouble({required String? key}) =>
      (super.noSuchMethod(
            Invocation.method(#getDouble, [], {#key: key}),
            returnValue: 0.0,
          )
          as double);

  @override
  int getInt({required String? key}) =>
      (super.noSuchMethod(
            Invocation.method(#getInt, [], {#key: key}),
            returnValue: 0,
          )
          as int);

  @override
  String getString({required String? key}) =>
      (super.noSuchMethod(
            Invocation.method(#getString, [], {#key: key}),
            returnValue: _i8.dummyValue<String>(
              this,
              Invocation.method(#getString, [], {#key: key}),
            ),
          )
          as String);
}
